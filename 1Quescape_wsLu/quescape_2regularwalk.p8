pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- microqiskit
--------------------------------------
-- math.p8
math = {}
math.pi = 3.14159
math.max = max
math.sqrt = sqrt
math.floor = flr
function math.random()
  return rnd(1)
end
function math.cos(theta)
  return cos(theta/(2*math.pi))
end
function math.sin(theta)
  return -sin(theta/(2*math.pi))
end
function math.randomseed(time)
end
os = {}
function os.time()
end
--------------------------------------

-- microqiskit.lua
-- this code is part of qiskit.
-- copyright ibm 2020

math.randomseed(os.time())

function quantumcircuit ()

  local qc = {}

  local function set_registers (n,m)
    qc.num_qubits = n
    qc.num_clbits = m or 0
  end
  qc.set_registers = set_registers

  qc.data = {}

  function qc.initialize (ket)
    ket_copy = {}
    for j, amp in pairs(ket) do
      if type(amp)=="number" then
        ket_copy[j] = {amp, 0}
      else
        ket_copy[j] = {amp[0], amp[1]}
      end
    end
    qc.data = {{'init',ket_copy}}
  end

  function qc.add_circuit (qc2)
    qc.num_qubits = math.max(qc.num_qubits,qc2.num_qubits)
    qc.num_clbits = math.max(qc.num_clbits,qc2.num_clbits)
    for g, gate in pairs(qc2.data) do
      qc.data[#qc.data+1] = ( gate )
    end
  end

  function qc.x (q)
    qc.data[#qc.data+1] = ( {'x',q} )
  end

  function qc.rx (theta,q)
    qc.data[#qc.data+1] = ( {'rx',theta,q} )
  end

  function qc.h (q)
    qc.data[#qc.data+1] = ( {'h',q} )
  end

  function qc.cx (s,t)
    qc.data[#qc.data+1] = ( {'cx',s,t} )
  end

  function qc.measure (q,b)
    qc.data[#qc.data+1] = ( {'m',q,b} )
  end

  function qc.rz (theta,q)
    qc.h(q)
    qc.rx(theta,q)
    qc.h(q)
  end

  function qc.ry (theta,q)
    qc.rx(math.pi/2,q)
    qc.rz(theta,q)
    qc.rx(-math.pi/2,q)
  end

  function qc.z (q)
    qc.rz(math.pi,q)
  end

  function qc.y (q)
    qc.z(q)
    qc.x(q)
  end

  return qc

end

function simulate (qc, get, shots)

  if not shots then
    shots = 1024
  end

  function as_bits (num,bits)
    -- returns num converted to a bitstring of length bits
    -- adapted from https://stackoverflow.com/a/9080080/1225661
    local bitstring = {}
    for index = bits, 1, -1 do
        b = num - math.floor(num/2)*2
        num = math.floor((num - b) / 2)
        bitstring[index] = b
    end
    return bitstring
  end

  function get_out (j)
    raw_out = as_bits(j-1,qc.num_qubits)
    out = ""
    for b=0,qc.num_clbits-1 do
      if outputnum_clbitsap[b] then
        out = raw_out[qc.num_qubits-outputnum_clbitsap[b]]..out
      end
    end
    return out
  end


  ket = {}
  for j=1,2^qc.num_qubits do
    ket[j] = {0,0}
  end
  ket[1] = {1,0}

  outputnum_clbitsap = {}

  for g, gate in pairs(qc.data) do

    if gate[1]=='init' then

      for j, amp in pairs(gate[2]) do
          ket[j] = {amp[1], amp[2]}
      end

    elseif gate[1]=='m' then

      outputnum_clbitsap[gate[3]] = gate[2]

    elseif gate[1]=="x" or gate[1]=="rx" or gate[1]=="h" then

      j = gate[#gate]

      for i0=0,2^j-1 do
        for i1=0,2^(qc.num_qubits-j-1)-1 do
          b1=i0+2^(j+1)*i1 + 1
          b2=b1+2^j

          e = {{ket[b1][1],ket[b1][2]},{ket[b2][1],ket[b2][2]}}

          if gate[1]=="x" then
            ket[b1] = e[2]
            ket[b2] = e[1]
          elseif gate[1]=="rx" then
            theta = gate[2]
            ket[b1][1] = e[1][1]*math.cos(theta/2)+e[2][2]*math.sin(theta/2)
            ket[b1][2] = e[1][2]*math.cos(theta/2)-e[2][1]*math.sin(theta/2)
            ket[b2][1] = e[2][1]*math.cos(theta/2)+e[1][2]*math.sin(theta/2)
            ket[b2][2] = e[2][2]*math.cos(theta/2)-e[1][1]*math.sin(theta/2)
          elseif gate[1]=="h" then
            for k=1,2 do
              ket[b1][k] = (e[1][k] + e[2][k])/math.sqrt(2)
              ket[b2][k] = (e[1][k] - e[2][k])/math.sqrt(2)
            end
          end

        end
      end

    elseif gate[1]=="cx" then

      s = gate[2]
      t = gate[3]

      if s>t then
        h = s
        l = t
      else
        h = t
        l = s
      end

      for i0=0,2^l-1 do
        for i1=0,2^(h-l-1)-1 do
          for i2=0,2^(qc.num_qubits-h-1)-1 do
            b1 = i0 + 2^(l+1)*i1 + 2^(h+1)*i2 + 2^s + 1
            b2 = b1 + 2^t
            e = {{ket[b1][1],ket[b1][2]},{ket[b2][1],ket[b2][2]}}
            ket[b1] = e[2]
            ket[b2] = e[1]
          end
        end
      end

    end

  end

  if get=="statevector" then
    return ket
  else

    probs = {}
    for j,amp in pairs(ket) do
      probs[j] = amp[1]^2 + amp[2]^2
    end

    if get=="expected_counts" then

      c = {}
      for j,p in pairs(probs) do
        out = get_out(j)
        if c[out] then
          c[out] = c[out] + probs[j]*shots
        else
          if out then -- in case of pico8 weirdness
            c[out] = probs[j]*shots
          end
        end
      end
      return c

    else

      m = {}
      for s=1,shots do
        cumu = 0
        un = true
        r = math.random()
        for j,p in pairs(probs) do
          cumu = cumu + p
          if r<cumu and un then
            m[s] = get_out(j)
            un = false
          end
        end
      end

      if get=="memory" then
        return m

      elseif get=="counts" then
        c = {}
        for s=1,shots do
          if c[m[s]] then
            c[m[s]] = c[m[s]] + 1
          else
            if m[s] then -- in case of pico8 weirdness
              c[m[s]] = 1
            else
              if c["error"] then
                c["error"] = c["error"]+1
              else
                c["error"] = 1
              end
            end
          end
        end
        return c

      end

    end

  end

end
--------------------------------------
-->8
-- func_useful
-------------------------------
function wait(t) 
 for i = 1,t do flip() end end
-------------------------------
function fltn(tb,rank)
-- return flattened table from
--rank 2 to rank 4
 local tb_fl = {}

 if rank==2 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    add(tb_fl,u) end end    

 elseif rank==3 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    for k,t in pairs(u) do
    add(tb_fl,t) end end end    
 
 elseif rank==4 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    for k,t in pairs(u) do
     for k,s in pairs(t) do
     add(tb_fl,s) end end end end    

 end
 return(tb_fl)
end
-------------------------------
function tb2str (src, s2t)
-- convert tb_of_str to str
-- reverse action by s2t="s2t"
 local tar = -1
 if s2t=="s2t" then
  tar = {}
  for i = 1,#src do
   tar[i] = sub(src,i,i) end

 else
  tar = ""
  for i,v in pairs(src) do
   tar = tar..v end

 end
 return tar
end
-------------------------------
function as_bits (num,bits,idn)
-- convert decimal to bintable
-- set idn="s" to binstring
 local bitstring = {}
 for index = bits, 1, -1 do
     b = num - flr(num/2)*2
     num = flr((num - b) / 2)
     bitstring[index] = b
 end

 if idn=="s" then
  bitstring = tb2str(bitstring)
 end
 return bitstring
end
-------------------------------
function bin2dec(src)
-- convert bin table or binstr
--to a decimal number
 local n,str = 0, ""

 if type(src)=="table" then
  str = tb2str(src)
 else str = src end

 for i = 1,#str do 
  n +=tonum(sub(str,i,i))*2^(#str-i)
 end 

 return(n)
end
-------------------------------
function bint2dect(b,sort)
 local d = {}

 for i,v in pairs(b) do
  local n = {}
  for j,u in pairs(v) do
   n[j] = bin2dec(u)
  end

  if #n==1 then
   d[i] = tostr(n[1])
  elseif #n==2 and sort then
   d[i] = min(n[1],n[2])..max(n[1],n[2])
  else
   d[i] = n[1]..n[2]
  end
 
 end
 return(d)
end
-------------------------------
function dect2bint(d)
 local b = {}
 for i,v in pairs(d) do
  local a1 = {}
  for j=1,#v do
   a0 = as_bits(sub(v,j,j),3,"_")
   a1[j] = a0
  end
  b[i] = a1
 end
 return b
end
-------------------------------
function _prtct(m)
-- handle string from qc.meas
--translate to {state,counts}
//n = prtct(m)
//for i=1,#n[1] do
// print(n[1][i]) print(n[2][i]) end
 st={} ct={} j = 1
 for i,v in pairs(m) do
  st[j]=i ct[j]=v
  j=j+1   end
 return {st,ct}
end
-- cut only significant state
--with counts > llm
function _qcmeas(qc,llm)
 for i = 0,2,1 do
  qc.measure(i,i) end
 local n = prtct(simulate(qc,"counts",1))
 local nst,nct = n[1],n[2]
 local possiblestt = {}
 for i,v in pairs(nct) do
  if tonum(v)>llm then
   possiblestt[i]=nst[i] end
 end
 return(possiblestt)
end
-------------------------------

-->8
-- func_cust
function qcmeas(nbit,qc,shots)
 for i = 0,nbit-1,1 do
  qc.measure(i,i)
 end
 return(simulate(qc,'counts',shots))
end

function mov(x,lim,pix)
 if pix>0 then
  if (x<lim) x+=pix
 elseif pix<0 then
  if (lim<x) x+=pix end
 return(x)
end

function hit(x,y,w,h)
 collide=false
 for i=x,x+w,w do
  if (fget(mget(i/8,y/8))>0) or
     (fget(mget(i/8,(y+h)/8))>0) then
     collide=true
  end
 end
 for i=y,y+h,h do
  if (fget(mget(x/8,i/8))>0) or
     (fget(mget((x+w)/8,i/8))>0) then
     collide=true
  end
 end

 return collide
end

function hita(x,y,w,h,f)
 if (f==nil) f=1
 lu=fget(mget( x   /8, y   /8))
 ld=fget(mget( x   /8,(y+h)/8))
 ru=fget(mget((x+w)/8, y   /8))
 rd=fget(mget((x+w)/8,(y+h)/8))
 collide = (lu==f or ld==f or 
            ru==f or rd==f)
 return collide,lu,ld,ru,rd
end
-->8
-- main_init
function _init()
 music(0)
 nbit = 3
 shots=16
 
 l = 20
 bd = 1
 
 rmx = 0
 rmy = 1
 xt,yt= 0,0
 xmin =  rmx   *32
 ymin =  rmy   *32
 xmax = (rmx+1)*32 -7
 ymax = (rmy+1)*32 -8

 w,h = 7,7
 ch={}
 ch.h = 1
 ch.n = 2
 walk = -1
 ch.x = xmin -1+1
 ch.y = ymax -3
 ch.sp= {{17,18,19,20},
         {21,22,23,24}}  
 ch.key = 0
 ch.gtx,ch.gth,ch.gtc = 0,0,0
        
-- cam={x=ch.x,y=ch.y}
 
 dic={{0,1},{1,0},{2,0},{2,1},
      {0,0},{0,2},{1,2},{2,2}}
 ric={'100','001','010','011',
      '000','101','110','111'}
 
-- room initialization

 rmls = {}
 for i=1,8,1 do
	 rm = {}
	 rm.id = ric[i]
	 rm.doru,rm.dord = false,false
		rm.idx = dic[i][1]*32
		rm.idy = dic[i][2]*32
		rm.npc = 119
		rm.key ,rm.gtx  = false,false
		rm.gth ,rm.gtc  = false,false
		rm.rwd ,rm.tool = false,false
		
		rmls[rm.id] = rm 
 end
 
 
 
poke(0x5f2d,1) end
--------------------------------------
-->8
-- main_update
function _update()

 qc = quantumcircuit()
 qc.set_registers(nbit,nbit)

 xt,yt = ch.x,ch.y

 dx,dy=0,0

 if btn(⬅️) then
  dx=-1
  ch.n=2
 end
 if btn(➡️) then
  dx=1
  ch.n=1
 end
 if btn(⬆️) then
  dy=-1
  ch.n=3
 end
 if btn(⬇️) then
  dy=1
  ch.n=4
 end

 if (ch.x-xt!=0 or ch.y-yt!=0) walk*=-1
	
 if (btnp(4,0)) then
  qc.h(0)
  qc.cx(0,1)
  m = qcmeas(nbit,qc,shots) end

-------------------------------

 h7x,_,_,_,_      =hita(ch.x+dx   ,ch.y,w,h,7)
 _,lu1,ld1,ru1,rd1=hita(ch.x+dx   ,ch.y,w,h)
 _, _ , _ ,ru2,rd2=hita(ch.x+dx+dx,ch.y,w,h)
 if (ru1==3 or rd1==3 or
     ld1==5 or h7x) then
  dx=0 end
 if (lu1==3 or ld1==3) and
    (ru2==3 or rd2==3) then
  dx=0 end

 h7y,_,_,_,_ = hita(ch.x,ch.y+dy,w,h,7)
 _,lu1,ld1,ru1,rd1=hita(ch.x,ch.y+dy,w,h)
 _, _ ,ld2, _ ,rd2=hita(ch.x,ch.y+dy+dy,w,h)
 if (ld1==5 or rd1==5 or 
     ru1==3 or h7y) then
  dy=0 end
 if (lu1==5 or ru1==5) and
    (ld2==5 or rd2==5) then
  dy=0 end


 ch.x+=dx
 ch.y+=dy


-------------------------------



 if (btnp(0,1)) then
  qc.h(0)
  qc.h(1)
  qc.h(2)
  m = qcmeas(nbit,qc,1)
  
  local nst = ""
  for i,v in pairs(m) do
   nst = i end 
   
  rmx = dic[bin2dec(nst)+1][1]
  rmy = dic[bin2dec(nst)+1][2]
  local xs = ch.x - xmin
  local ys = ch.y - ymin

  xmin =  rmx   *32
  ymin =  rmy   *32
  xmax = (rmx+1)*32 -7
  ymax = (rmy+1)*32 -8
  
  ch.x = xmin +xs
  ch.y = ymin +ys
--  if ((ch.x-cam.x)< 1*tol) cam.x = ch.x
--  if ((ch.x-cam.x)>-1*tol) cam.x = ch.x
--  if ((ch.y-cam.y)< 1*tol) cam.y = ch.y
--  if ((ch.y-cam.y)>-1*tol) cam.y = ch.y
  
 end

end
--------------------------------------
-->8
-- main_draw
function _draw()
 cls()
 map(0,0)
 camera(128*0,0)
     
 -- room final
	spr(117,1*32+1*8  ,1*32+2*8)
	spr(101,1*32+1*8  ,1*32+1*8)
	spr( 57,1*32+3*8  ,1*32+0*8+2)
	spr( 56,0*32+0*8+1,1*32+3*8-1)

	spr(rmls['011'].npc,
	    rmls['011'].idx+0.2*8,
	    rmls['011'].idy+1.8*8)
	
 spr(ch.sp[ch.h][ch.n]+8+8*walk,
     ch.x, ch.y)
 -- room 000
 
-- if (btn(🅾️) and btn(➡️)) cam.x+=4
-- if (btn(🅾️) and btn(⬅️)) cam.x-=4
-- if (btn(🅾️) and btn(⬆️)) cam.y-=4
-- if (btn(🅾️) and btn(⬇️)) cam.y+=4
-- camera(cam.x-64,cam.y-64)
-- camera(1,1)

 for i,v in pairs(ric) do
  print(v,
    dic[bin2dec(v)+1][1]*32+19-19,
    dic[bin2dec(v)+1][2]*32+25-25,
        14) end
        
 print(ch.key,104, 98,13)
 print(ch.gtx,104,106,13)
 print(ch.gth,104,114,13)
 print(ch.gtc,104,122,13)
 
spr(0,stat(32)-1,stat(33)-1)end

__gfx__
f7000000000000000cccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005500000
7000000000000000cc1111cc066006b00000000000000000077007a000000000000000000000000000000000000000000000000000a000000505550055550000
0070000000000000c1cccc7c0bb66bb000000000000000000aa77aa00000000000000000002222000011110000333300009999000a4a00000555d5005d555555
0000000000000000c1cccc7c0bbbbbb000288800008eee000aaaaaa000000000000000000288872001ccc71003bbb73009fff7900a0aaaaa0000000050555555
0000000000000000c1cccc7c0bbbbbb00088888000eeeee00aaaaaa00000000002222220288888721ccccc713bbbbb739fffff790a0a4a4a000000005555d5dd
0000000000000000c1cccc7c00bbbb00000000000000000000aaaa000000000028888882288888821cccccc13bbbbbb39ffffff904a4040400000000d55d0d0d
0000000000000000cc7777cc00dddd0000000000000000000066660000000000022222200222222001111110033333300999999000400000000000000dd00000
00000000000000000cccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000d5555551d5555551d5555551d5555551d5555551d5555551d1111100
0000000000288800008882000088820000288800008eee0000eee80000eee80000eee800d1111115d1111115d1111115d1111115d1111115d1111115d5555550
000000000088888008888800008888000088880000eeeee00eeeee0000eeee0000eeee00d8888215dcccc215d3333215daaaa215d9777715d4444215d111151d
0000000000f1f100001f1f000011110000f1f100007d7d0000d7d70000dddd00007d7d00d8188215dc1cc215d3133215da1aa215d9777715d4144215d125521d
0000000000ffff0000ffff0000f11f0000ffff000077770000777700007dd70000777700d8888215dcccc215d3333215daaaa215d9777715d4444215d152551d
000000000bbbbb3003bbbbb003b11bb00bbbbb300aaaaab00baaaaa00baddaa00aaaaab0d8888215dcccc215d3333215daaaa215d4444415d4444215d111151d
000000000fddddf00fddddf00fddddf00fddddf007666670076666700766667007666670d111111dd111111dd111111dd111111dd111111dd111111dddddddd0
000000000040020000200400002004000040020000900800008009000080090000900800d5555551d5555551d5555551d5555551d5555551d5555551d1111100
000000000000000000000000000000000000000000000000000000000000000000000000dddddddddddddddddddddddddddddddddddddddddddddddddddddddd
0000000000288800008882000088820000288800008eee0000eee80000eee80000eee8005188881551cccc155133331551aaaa1551499915514444151d111151
000000000088888008888800008888000088880000eeeee00eeeee0000eeee0000eeee005188181551cc1c155133131551aa1a1551477715514414151d152151
0000000000f1f100001f1f000011110000f1f100007d7d0000d7d70000dddd00007d7d005188881551cccc155133331551aaaa1551477715514444151d125151
0000000000ffff0000ffff0000f11f0000ffff000077770000777700007dd700007777005188881551cccc155133331551aaaa1551477715514444151d155151
000000000bbbbb3003bbbbb003b11bb00bbbbb300aaaaab00baaaaa00baddaa00aaaaab05122221551222215512222155122221551477715512222151d552551
000000000fddddf00fddddf00fddddf00fddddf0076666700766667007666670076666705111111551111115511111155111111551111115511111150d111150
0000000000200400004002000040020000200400008009000090080000900800008009001d5555511d5555511d5555511d5555511d5555511d55555100dddd00
00000000ddddddddd6666666d6666666d66666666666000066d666d66ddd6d6d0000000000111199dddddddddddddddddddddddd770000770000000000000000
00000000d6666666d6666666d6666666d666666666660000dddddddddd6d6d6d1110000011199199d111111dd111111dd111111d700000070a00000000000000
00000000d6666666d6666666d6666666d666666666660000666d666d6d6ddd6d9911110099199199d181181dd1c1111dd1bb818d00000000a4a0000000000000
00000000d6565556d66d66d6d66d6666d655d6d666660000dddddddd6d6d6ddd9919911199199144d111811dd1ccc11ddbb1181d00000000a0aaaaaa00000000
00000000d6555d56d6666d66d66ddd66d5566d66666600006d666d666ddd6d6d9919919999144111d118111dd1c11c1ddbb1181d00000000a0a44a4a00000000
00000000d6666666d666d666d66d66d6d5566d6666660000dddddddddd6d6d6d9919919944111122d181181dd1c11c1dd1bb818d000000004a40040400000000
00000000d6666666d66d66d6d66d66d6d655d6d666660000d666d6666d6ddd6d4419919911122222d111111dd111111dd111111d700000070400000000000000
00000000d6666666d6666666d6666666d666666666660000dddddddd6d6d6ddd4414419922222222dddddddddddddddddddddddd770000770000000000000000
0000000d0000000dd000000000000000ddddddddd0000000dddddddddddddddddddddddddddddddd66666d66dddddddd00000000000000000000000000000000
0000000d0000000dd00000000000000000000000d0000000dddddddd0000000d66660000ddd000006666ddddd000000000000000000000000000000000000000
0000000d0000000dd00000000000000000000000d0000000dddddddd0000000d66660000ddd000006666d666d000000000999900000000000000000000000000
0000000d0000000dd00000000000000000000000d0000000dddddddd0000000d66660000ddd000006666ddddd000000009fff790000000000000000000000000
0000000d0000000dd00000000000000000000000d0000000dddddddd0000000d66660000ddd00000666666d6d00000009fffff79000000000000000000000000
0000000d0000000dd00000000000000000000000d0000000d00000000000000d66660000000000006666ddddd00000009ffffff9000000000000000000000000
0000000d0000000dd00000000000000000000000d0000000d00000000000000d66660000000000006666666dd000000009999990000000000000000000000000
0000000ddddddddddddddddddddddddd00000000d0000000d00000000000000d66660000000000006666ddddd000000000000000000000000000000000000000
00111111111111000000000000000000000000000000b3000000000000666000aa00000000000004000cc0000000af0000000000000000000000000000000000
0013333333333100005555555555550000e8880000eb320000f00e0000066600aa90000000944449000cc000000af9a000000000000000000000000000000000
00133333333431000055555555555500088888800e8288200fffe9806046dd6009a800000940006000cccc0000af994a00000000003333000000000000000000
0013333333883100000dddddddddd000018118100ea88a200fee9880666400d0008980500400060000cccc0000f9944a00aaaa0003bbb7300000000000000000
0013333333883100000d11111111d000070761600e8888200e999820d660400000088850040060000dccc7c000f9422a0aaaaaa03bbbbb730000000000000000
0013333333333100000d11911111d000067117600e88a820009882000d60020000008500040600000dccccc000a4221a013a11103bbbbbb30000000000000000
0013333333333100000d11111131d00000666600008882000002200000dd002000055040046000000ddcccc0000a44a099999999033333300000000000000000
0016666666666100000d11181131d00000000000000820000000000000000004000000054900000000dddc000000aa0000000000000000000000000000000000
0013333333333100000d22222222d00000e11e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0013333333333100000dddddddddd0000eeddee000f6f6f000066000077777000000000000000000000000000000000000000000000000000000000000000000
00133883333331000058555555c555000dd77dd000678760000660000767675000004000066666600555555005555550000000000dddd0000000000000000000
0013488333393100055155555515555001d11d1000f787f0005555000776d75000044400055555500567675005cccc500000000006d6ddd00000000000000000
0013333333333100055158e55515c6500717616000677760005ee500076d775000444000067666600576765005c0cc50000000000d6d60d00000000000000000
001333333333310005555555555555500671176000f787f00055e50007676750060400000667776005555550055555500000000006d6ddd00000000000000000
0011111111111100000000000000000000666600006f6f600055e5000777775006600000066666600005500000055000000000000dddd0000000000000000000
00020000000020000000000000000000000000000000f00000555500005555500000000000000000005555000055550000000000000000000000000000000000
000000000000000000dddd0000000000009000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006660000d1111d000000000009999900066660000000000000660000000000000000000000000000080000007777700000067000000000000000000
0000000000777000d177161d0f00000f909091900066666000dddd000066660000000000000000000000000000777700007670000006d0000000000000000000
0000777000666000d111111d00fffff090997990001f1f060015150000f1f100000000000000000000000000007d670000757000006d00000000000000000000
00dddddddddddd00d161171d0ff0f1f04009990000ffff000055550000ffff000000000000000000000000000076d70000767000005d50000000000000000000
000d00dddd00d000d166771df0ff7ff009997990099999900cccccc008888880000000000000000000000000007d670000757000000050000000000000000000
000d00000000d0000d1111d0900fff00009979900f9999f005dddd500feeeef00000000000000000000000000077770000070000005555000000000000000000
000d00000000d00000dddd000fff7ff0000909000020020000200200002002000000000000000000000000000000000000070600000000000000000000000000
__gff__
0000000000000000000000000001010100000000000000000007070707010703000000000000000000070707070107030007070707070707050501010101010007070707050307070705070700000000030300000000000000000000000000000303000000000000000000000000000003030700000707070000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4649444446494444464944444b4444374649444446494444464944444b4444474649444446494444464944444b4444474649444446494444464944444b44444700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45010b01450e0101450101014500013745010b01450e0101450101014500014045010b01450e0101450101014500014045010b01450e0101450101014500014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145010101450101014500013745010101450101014501010145000140450101014501010145010101450001404501010145010101450101014500014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
450101011d0101011e0101011d3a0137450101011d0101011e0101011d013a40450101011d0101011e0101011d013a40450101011d0101011e0101011d013a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
464944444b4444444649442d4b444437464944444b4444444649442d4b444447464944444b4444444649442d4b444447464944444b4444444649442d4b44444700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145010101450e0101450101374501010145010101450e0101450101404501010145010101450e0101450101404501010145010101450e01014501014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145010101450d010145003b374501010145010101450d0101450000404501010145010101450d0101450000404501010145010101450d01014500004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45013a0145010101190101011e3a3c3745013a0145010101190101011e013a3c45013a0145010101190101011e013a3c45013a0145010101190101011e013a3c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
46494444464944444649442e4b44443746494444464944444649442e4b44444746494444464944444649442e4b44444746494444464944444649442e4b44444700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
450e010145010b01450e010145010a37450e010145010b01450e010145010a40450e010145010b01450e010145010a40450e010145010b01450e010145010a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145000101450101014500013745010101450001014501010145000140450101014500010145010101450001404501010145000101450101014500014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
450001011e0101011d0801011b010037450001011e0101011d0801011b010040450001011e0101011d0801011b010040450001011e0101011d0801011b01004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4b44442a4b44442a4b44442e31482c374b44442a4b44442a4b44442e31482c474b44442a4b44442a4b44442e31482c474b44442a4b44442a4b44442e31482c4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501090145010901450101013235013745010901450109014501010132350140450109014501090145010101323501404501090145010901450101013235014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
450101014500000145013b013335303745010101450000014501013b3335304045010101450000014501013b3335304045010101450000014501013b3335304000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
363636363636363636363636344a3637424343434243434342434343344a4341424343434243434342434343344a4341424343434243434342434343344a434100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010c02020075000750000500005000750007500005000050005500055000050000500055000550000500005000550000500055000050005500005000550000500055000550005500055000050000500005000050
010c0000180501805018050180501a0501a0501a0501a0501f0501f0501f0501f0501a0501a0501a0501a050180501805018050180501a0501a0501a0501a0501f0501f0501f0501f0501a0501a0501a0501a050
010c0000150201502015020150200e5200e5200e5200e5201102011020115201152010020100201052010520155201552015120151200e5200e5200e1200e1201112011120117201172010120101201072010720
__music__
03 00024344

