pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- microqiskit
--------------------------------------
-- math.p8
math = {}
math.pi = 3.14159
math.max = max
math.sqrt = sqrt
math.floor = flr
function math.random()
  return rnd(1)
end
function math.cos(theta)
  return cos(theta/(2*math.pi))
end
function math.sin(theta)
  return -sin(theta/(2*math.pi))
end
function math.randomseed(time)
end
os = {}
function os.time()
end
--------------------------------------

-- microqiskit.lua
-- this code is part of qiskit.
-- copyright ibm 2020

math.randomseed(os.time())

function quantumcircuit ()

  local qc = {}

  local function set_registers (n,m)
    qc.num_qubits = n
    qc.num_clbits = m or 0
  end
  qc.set_registers = set_registers

  qc.data = {}

  function qc.initialize (ket)
    ket_copy = {}
    for j, amp in pairs(ket) do
      if type(amp)=="number" then
        ket_copy[j] = {amp, 0}
      else
        ket_copy[j] = {amp[0], amp[1]}
      end
    end
    qc.data = {{'init',ket_copy}}
  end

  function qc.add_circuit (qc2)
    qc.num_qubits = math.max(qc.num_qubits,qc2.num_qubits)
    qc.num_clbits = math.max(qc.num_clbits,qc2.num_clbits)
    for g, gate in pairs(qc2.data) do
      qc.data[#qc.data+1] = ( gate )
    end
  end

  function qc.x (q)
    qc.data[#qc.data+1] = ( {'x',q} )
  end

  function qc.rx (theta,q)
    qc.data[#qc.data+1] = ( {'rx',theta,q} )
  end

  function qc.h (q)
    qc.data[#qc.data+1] = ( {'h',q} )
  end

  function qc.cx (s,t)
    qc.data[#qc.data+1] = ( {'cx',s,t} )
  end

  function qc.measure (q,b)
    qc.data[#qc.data+1] = ( {'m',q,b} )
  end

  function qc.rz (theta,q)
    qc.h(q)
    qc.rx(theta,q)
    qc.h(q)
  end

  function qc.ry (theta,q)
    qc.rx(math.pi/2,q)
    qc.rz(theta,q)
    qc.rx(-math.pi/2,q)
  end

  function qc.z (q)
    qc.rz(math.pi,q)
  end

  function qc.y (q)
    qc.z(q)
    qc.x(q)
  end

  return qc

end

function simulate (qc, get, shots)

  if not shots then
    shots = 1024
  end

  function as_bits (num,bits)
    -- returns num converted to a bitstring of length bits
    -- adapted from https://stackoverflow.com/a/9080080/1225661
    local bitstring = {}
    for index = bits, 1, -1 do
        b = num - math.floor(num/2)*2
        num = math.floor((num - b) / 2)
        bitstring[index] = b
    end
    return bitstring
  end

  function get_out (j)
    raw_out = as_bits(j-1,qc.num_qubits)
    out = ""
    for b=0,qc.num_clbits-1 do
      if outputnum_clbitsap[b] then
        out = raw_out[qc.num_qubits-outputnum_clbitsap[b]]..out
      end
    end
    return out
  end


  ket = {}
  for j=1,2^qc.num_qubits do
    ket[j] = {0,0}
  end
  ket[1] = {1,0}

  outputnum_clbitsap = {}

  for g, gate in pairs(qc.data) do

    if gate[1]=='init' then

      for j, amp in pairs(gate[2]) do
          ket[j] = {amp[1], amp[2]}
      end

    elseif gate[1]=='m' then

      outputnum_clbitsap[gate[3]] = gate[2]

    elseif gate[1]=="x" or gate[1]=="rx" or gate[1]=="h" then

      j = gate[#gate]

      for i0=0,2^j-1 do
        for i1=0,2^(qc.num_qubits-j-1)-1 do
          b1=i0+2^(j+1)*i1 + 1
          b2=b1+2^j

          e = {{ket[b1][1],ket[b1][2]},{ket[b2][1],ket[b2][2]}}

          if gate[1]=="x" then
            ket[b1] = e[2]
            ket[b2] = e[1]
          elseif gate[1]=="rx" then
            theta = gate[2]
            ket[b1][1] = e[1][1]*math.cos(theta/2)+e[2][2]*math.sin(theta/2)
            ket[b1][2] = e[1][2]*math.cos(theta/2)-e[2][1]*math.sin(theta/2)
            ket[b2][1] = e[2][1]*math.cos(theta/2)+e[1][2]*math.sin(theta/2)
            ket[b2][2] = e[2][2]*math.cos(theta/2)-e[1][1]*math.sin(theta/2)
          elseif gate[1]=="h" then
            for k=1,2 do
              ket[b1][k] = (e[1][k] + e[2][k])/math.sqrt(2)
              ket[b2][k] = (e[1][k] - e[2][k])/math.sqrt(2)
            end
          end

        end
      end

    elseif gate[1]=="cx" then

      s = gate[2]
      t = gate[3]

      if s>t then
        h = s
        l = t
      else
        h = t
        l = s
      end

      for i0=0,2^l-1 do
        for i1=0,2^(h-l-1)-1 do
          for i2=0,2^(qc.num_qubits-h-1)-1 do
            b1 = i0 + 2^(l+1)*i1 + 2^(h+1)*i2 + 2^s + 1
            b2 = b1 + 2^t
            e = {{ket[b1][1],ket[b1][2]},{ket[b2][1],ket[b2][2]}}
            ket[b1] = e[2]
            ket[b2] = e[1]
          end
        end
      end

    end

  end

  if get=="statevector" then
    return ket
  else

    probs = {}
    for j,amp in pairs(ket) do
      probs[j] = amp[1]^2 + amp[2]^2
    end

    if get=="expected_counts" then

      c = {}
      for j,p in pairs(probs) do
        out = get_out(j)
        if c[out] then
          c[out] = c[out] + probs[j]*shots
        else
          if out then -- in case of pico8 weirdness
            c[out] = probs[j]*shots
          end
        end
      end
      return c

    else

      m = {}
      for s=1,shots do
        cumu = 0
        un = true
        r = math.random()
        for j,p in pairs(probs) do
          cumu = cumu + p
          if r<cumu and un then
            m[s] = get_out(j)
            un = false
          end
        end
      end

      if get=="memory" then
        return m

      elseif get=="counts" then
        c = {}
        for s=1,shots do
          if c[m[s]] then
            c[m[s]] = c[m[s]] + 1
          else
            if m[s] then -- in case of pico8 weirdness
              c[m[s]] = 1
            else
              if c["error"] then
                c["error"] = c["error"]+1
              else
                c["error"] = 1
              end
            end
          end
        end
        return c

      end

    end

  end

end
--------------------------------------
-->8
-- func_useful
-------------------------------
function wait(t) 
 for i = 1,t do flip() end end
-------------------------------
function fltn(tb,rank)
-- return flattened table from
--rank 2 to rank 4
 local tb_fl = {}

 if rank==2 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    add(tb_fl,u) end end    

 elseif rank==3 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    for k,t in pairs(u) do
    add(tb_fl,t) end end end    
 
 elseif rank==4 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    for k,t in pairs(u) do
     for k,s in pairs(t) do
     add(tb_fl,s) end end end end    

 end
 return(tb_fl)
end
-------------------------------
function tb2str (src, s2t)
-- convert tb_of_str to str
-- reverse action by s2t="s2t"
 local tar = -1
 if s2t=="s2t" then
  tar = {}
  for i = 1,#src do
   tar[i] = sub(src,i,i) end

 else
  tar = ""
  for i,v in pairs(src) do
   tar = tar..v end

 end
 return tar
end
-------------------------------
function as_bits (num,bits,idn)
-- convert decimal to bintable
-- set idn="s" to binstring
 local bitstring = {}
 for index = bits, 1, -1 do
     b = num - flr(num/2)*2
     num = flr((num - b) / 2)
     bitstring[index] = b
 end

 if idn=="s" then
  bitstring = tb2str(bitstring)
 end
 return bitstring
end
-------------------------------
function bin2dec(src)
-- convert bin table or binstr
--to a decimal number
 local n,str = 0, ""

 if type(src)=="table" then
  str = tb2str(src)
 else str = src end

 for i = 1,#str do 
  n +=tonum(sub(str,i,i))*2^(#str-i)
 end 

 return(n)
end
-------------------------------
function bint2dect(b,sort)
 local d = {}

 for i,v in pairs(b) do
  local n = {}
  for j,u in pairs(v) do
   n[j] = bin2dec(u)
  end

  if #n==1 then
   d[i] = tostr(n[1])
  elseif #n==2 and sort then
   d[i] = min(n[1],n[2])..max(n[1],n[2])
  else
   d[i] = n[1]..n[2]
  end
 
 end
 return(d)
end
-------------------------------
function dect2bint(d)
 local b = {}
 for i,v in pairs(d) do
  local a1 = {}
  for j=1,#v do
   a0 = as_bits(sub(v,j,j),3,"_")
   a1[j] = a0
  end
  b[i] = a1
 end
 return b
end
-------------------------------
function _prtct(m)
-- handle string from qc.meas
--translate to {state,counts}
//n = prtct(m)
//for i=1,#n[1] do
// print(n[1][i]) print(n[2][i]) end
 st={} ct={} j = 1
 for i,v in pairs(m) do
  st[j]=i ct[j]=v
  j=j+1   end
 return {st,ct}
end
-- cut only significant state
--with counts > llm
function _qcmeas(qc,llm)
 for i = 0,2,1 do
  qc.measure(i,i) end
 local n = prtct(simulate(qc,"counts",1))
 local nst,nct = n[1],n[2]
 local possiblestt = {}
 for i,v in pairs(nct) do
  if tonum(v)>llm then
   possiblestt[i]=nst[i] end
 end
 return(possiblestt)
end
-------------------------------

-->8
-- func_cust
function qcmeas(nbit,qc,shots)
 for i = 0,nbit-1,1 do
  qc.measure(i,i)
 end
 return(simulate(qc,'counts',shots))
end

function mov(x,lim,pix)
 if pix>0 then
  if (x<lim) x+=pix
 elseif pix<0 then
  if (lim<x) x+=pix end
 return(x)
end

function hit(x,y,w,h)
 collide=false
 for i=x,x+w,w do
  if (fget(mget(i/8,y/8))>0) or
     (fget(mget(i/8,(y+h)/8))>0) then
     collide=true
  end
 end
 for i=y,y+h,h do
  if (fget(mget(x/8,i/8))>0) or
     (fget(mget((x+w)/8,i/8))>0) then
     collide=true
  end
 end

 return collide
end

-->8
-- main_init
function _init()
 music(0)
 nbit = 3
 shots=16
 
 l = 20
 bd = 1
 
 rmx = 0
 rmy = 1
 xt,yt= 0,0
 xmin =  rmx   *32
 ymin =  rmy   *32
 xmax = (rmx+1)*32 -7
 ymax = (rmy+1)*32 -8

 ch={}
 ch.h = 1
 ch.n = 2
 walk = -1
 ch.x = xmin -1
 ch.y = ymax -3
 ch.sp= {{17,18,19,20},
         {21,22,23,24}}  
 ch.key = 0
 ch.gtx,ch.gth,ch.gtc = 0,0,0
        
-- cam={x=ch.x,y=ch.y}
 
 dic={{0,1},{1,0},{2,0},{2,1},
      {0,0},{0,2},{1,2},{2,2}}
 ric={'100','001','010','011',
      '000','101','110','111'}
 
-- room initialization

 rmls = {}
 for i=1,8,1 do
	 rm = {}
	 rm.id = ric[i]
	 rm.doru,rm.dord = false,false
		rm.idx = dic[i][1]*32
		rm.idy = dic[i][2]*32
		rm.npc = 119
		rm.key ,rm.gtx  = false,false
		rm.gth ,rm.gtc  = false,false
		rm.rwd ,rm.tool = false,false
		
		rmls[rm.id] = rm 
 end
 
 
 
end
--------------------------------------
-->8
-- main_update
function _update()

 qc = quantumcircuit()
 qc.set_registers(nbit,nbit)

 xt,yt = ch.x,ch.y

 local tol = -56
 if btn(⬅️) then
  ch.x = mov(ch.x,xmin,-1)
  ch.n=2
--  if ((ch.x-cam.x)< 1*tol) cam.x = ch.x
 end
 if btn(➡️) then
  ch.x = mov(ch.x,xmax, 1)
  ch.n=1
--  if ((ch.x-cam.x)>-1*tol) cam.x = ch.x
 end
 if btn(⬆️) then
  ch.y = mov(ch.y,ymin,-1)
  ch.n=3
--  if ((ch.y-cam.y)< 1*tol) cam.y = ch.y
 end
 if btn(⬇️) then
  ch.y = mov(ch.y,ymax, 1)
  ch.n=4
--  if ((ch.y-cam.y)>-1*tol) cam.y = ch.y
 end

 if (ch.x-xt!=0 or ch.y-yt!=0) walk*=-1
	
 if (btnp(4,0)) then
  qc.h(0)
  qc.cx(0,1)
  m = qcmeas(nbit,qc,shots) end

 if (btnp(0,1)) then
  qc.h(0)
  qc.h(1)
  qc.h(2)
  m = qcmeas(nbit,qc,1)
  
  local nst = ""
  for i,v in pairs(m) do
   nst = i end 
   
  rmx = dic[bin2dec(nst)+1][1]
  rmy = dic[bin2dec(nst)+1][2]
  local xs = ch.x - xmin
  local ys = ch.y - ymin

  xmin =  rmx   *32
  ymin =  rmy   *32
  xmax = (rmx+1)*32 -7
  ymax = (rmy+1)*32 -8
  
  ch.x = xmin +xs
  ch.y = ymin +ys
--  if ((ch.x-cam.x)< 1*tol) cam.x = ch.x
--  if ((ch.x-cam.x)>-1*tol) cam.x = ch.x
--  if ((ch.y-cam.y)< 1*tol) cam.y = ch.y
--  if ((ch.y-cam.y)>-1*tol) cam.y = ch.y
  
 end

end
--------------------------------------
-->8
-- main_draw
function _draw()
 cls()
 map(0,0)
     
 -- room final
	spr(117,1*32+1*8  ,1*32+2*8)
	spr(101,1*32+1*8  ,1*32+1*8)
	spr( 57,1*32+3*8  ,1*32+0*8+2)
	spr( 56,0*32+0*8+1,1*32+3*8-1)

	spr(rmls['011'].npc,
	    rmls['011'].idx+0.2*8,
	    rmls['011'].idy+1.8*8)
	
 spr(ch.sp[ch.h][ch.n]+8+8*walk,
     ch.x, ch.y)
 -- room 000
 
-- if (btn(🅾️) and btn(➡️)) cam.x+=4
-- if (btn(🅾️) and btn(⬅️)) cam.x-=4
-- if (btn(🅾️) and btn(⬆️)) cam.y-=4
-- if (btn(🅾️) and btn(⬇️)) cam.y+=4
-- camera(cam.x-64,cam.y-64)
-- camera(1,1)

 for i,v in pairs(ric) do
  print(v,
    dic[bin2dec(v)+1][1]*32+19-19,
    dic[bin2dec(v)+1][2]*32+25-25,
        14) end
        
 print(ch.key,104, 98,13)
 print(ch.gtx,104,106,13)
 print(ch.gth,104,114,13)
 print(ch.gtc,104,122,13)
 
end

__gfx__
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000005500000
000000000000000000000000066006b00000000000000000077007a0000000000000000000000000000000000000000000000000aaaa00000505550055550000
0070070000000000000000000bb66bb000000000000000000aa77aa0000000000000000000222200001111000033330000999900a9aaaaaa0555d5005d555555
0007700000000000000000000bbbbbb000288800008eee000aaaaaa000000000000000000288872001ccc71003bbb73009fff790a0aaaaaa0000000050555555
0007700000000000000000000bbbbbb00088888000eeeee00aaaaaa00000000000000000288888721ccccc713bbbbb739fffff79aaaa9a99000000005555d5dd
00700700000000000000000000bbbb00000000000000000000aaaa000000000000000000288888821cccccc13bbbbbb39ffffff99aa9090900000000d55d0d0d
00000000000000000000000000dddd0000000000000000000066660000000000000000000222222001111110033333300999999009900000000000000dd00000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00900090000000000000000000000000000000000000000000000000000000000000000065555551655555516555555165555551655555516555555161111100
0099999000288800008882000088820000288800008eee0000eee80000eee80000eee80061111115611111156111111561111115611111156111111565555550
909091900088888008888800008888000088880000eeeee00eeeee0000eeee0000eeee00688882156cccc215633332156aaaa21569777715644442156111151d
9099799000f1f100001f1f000011110000f1f100007d7d0000d7d70000dddd00007d7d00681882156c1cc215631332156a1aa21569777715641442156125521d
4009990000ffff0000ffff0000f11f0000ffff000077770000777700007dd70000777700688882156cccc215633332156aaaa21569777715644442156152551d
099979900bbbbb3003bbbbb003b11bb00bbbbb300aaaaab00baaaaa00baddaa00aaaaab0688882156cccc215633332156aaaa21564444415644442156111151d
009979900fddddf00fddddf00fddddf00fddddf0076666700766667007666670076666706111111d6111111d6111111d6111111d6111111d6111111d6dddddd0
0009090000400200002004000020040000400200009008000080090000800900009008006dddddd16dddddd16dddddd16dddddd16dddddd16dddddd161111100
00000000000000000000000000000000000000000000000000000000000000000000000066666666666666666666666666666666666666666666666666666666
0000000000288800008882000088820000288800008eee0000eee80000eee80000eee800d1888815d1cccc15d1333315d1aaaa15d1499915d14444151d111151
0f00000f0088888008888800008888000088880000eeeee00eeeee0000eeee0000eeee00d1881815d1cc1c15d1331315d1aa1a15d1477715d14414151d152151
00fffff000f1f100001f1f000011110000f1f100007d7d0000d7d70000dddd00007d7d00d1888815d1cccc15d1333315d1aaaa15d1477715d14444151d125151
0ff0f1f000ffff0000ffff0000f11f0000ffff000077770000777700007dd70000777700d1888815d1cccc15d1333315d1aaaa15d1477715d14444151d155151
f0ff7ff00bbbbb3003bbbbb003b11bb00bbbbb300aaaaab00baaaaa00baddaa00aaaaab0d1222215d1222215d1222215d1222215d1477715d12222151d552551
900fff000fddddf00fddddf00fddddf00fddddf007666670076666700766667007666670d1111115d1111115d1111115d1111115d1111115d11111150d111150
0fff7ff000200400004002000040020000200400008009000090080000900800008009001d5555511d5555511d5555511d5555511d5555511d55555100dddd00
00dddd00666666666666666666666666666666666666000000000000d111d1d10000000000111199dddddddddddddddddddddddd000000000000000000000000
0d1111d066666666666666666666666666666666666600000000000011d1d1d11110000011199199d111111dd111111dd111111d000000000000000000000000
d177161d666666666666666666666666666666666666000000000000d1d111d19911110099199199d181181dd1c1111dd1bb818d000000000000000000000000
d111111d6656555666d66d6666d6666666dd56566666000000000000d1d1d1119919911199199144d111811dd1ccc11ddbb1181d000000000000000000000000
d161171d66555d566666d66666ddd6666dd665666666000000000000d111d1d19919919999144111d118111dd1c11c1ddbb1181d000000000000000000000000
d166771d66666666666d666666d66d666dd66566666600000000000011d1d1d19919919944111122d181181dd1c11c1dd1bb818d000000000000000000000000
0d1111d06666666666d66d6666d66d6666dd56566666000000000000d1d111d14419919911122222d111111dd111111dd111111d000000000000000000000000
00dddd00666666666666666666666666666666666666000000000000d1d1d1114414419922222222dddddddddddddddddddddddd000000000000000000000000
00000006000000066000000000000000666666666000000066666666666666666666666666666666666600006666666600000000000000000000000000000000
00000006000000066000000000000000000000006000000066666666000000066666000066600000666600006000000000000000000000000000000000000000
00000006000000066000000000000000000000006000000066666666000000066666000066600000666600006000000000999900000000000000000000000000
00000006000000066000000000000000000000006000000066666666000000066666000066600000666600006000000009fff790000000000000000000000000
0000000600000006600000000000000000000000600000006666666600000006666600006660000066660000600000009fffff79000000000000000000000000
0000000600000006600000000000000000000000600000006000000000000006666600000000000066660000600000009ffffff9000000000000000000000000
00000006000000066000000000000000000000006000000060000000000000066666000000000000666600006000000009999990000000000000000000000000
00000006666666666666666666666666000000006000000060000000000000066666000000000000666666666000000000000000000000000000000000000000
001111111111110000000000000cc000000000000000b3000000000000666000aa00000000000004000000000000000000000000000000000000000000000000
001333333333310000000000000cc00000e8880000eb320000f00e0000066600aa90000000944449000000000000000000000000000000000000000000000000
00133333333431000000000000cccc00088888800e8288200fffe9806046dd6009a8000009400060000000000000000000000000003333000000000000000000
00133333338831000000000000cccc00018118100ea88a200fee9880666400d00089805004000600000000000000000000aaaa0003bbb7300000000000000000
0013333333883100000000000dccc7c0070761600e8888200e999820d6604000000888500400600000000000000000000aaaaaa03bbbbb730000000000000000
0013333333333100000000000dccccc0067117600e88a820009882000d60020000008500040600000000000000000000013a11103bbbbbb30000000000000000
0013333333333100000000000ddcccc000666600008882000002200000dd00200005504004600000000000000000000099999999033333300000000000000000
00166666666661000000000000dddc00000000000008200000000000000000040000000549000000000000000000000000000000000000000000000000000000
0013333333333100000000000000af0000e11e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001333333333310000000000000af9a00eeddee000f6f6f000066000077777000000000000000000000000000000000000000000000000000000000000000000
00133883333331000000000000af994a0dd77dd000678760000660000767675000004000066666600555555005555550000000000dddd0000000000000000000
00134883333931000000000000f9944a01d11d1000f787f0005555000776d75000044400055555500567675005cccc500000000006d6ddd00000000000000000
00133333333331000000000000f9422a0717616000677760005ee500076d775000444000067666600576765005c0cc50000000000d6d60d00000000000000000
00133333333331000000000000a4221a0671176000f787f00055e50007676750060400000667776005555550055555500000000006d6ddd00000000000000000
001111111111110000000000000a44a000666600006f6f600055e5000777775006600000066666600005500000055000000000000dddd0000000000000000000
0002000000002000000000000000aa00000000000000f00000555500005555500000000000000000005555000055550000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006660000000000000000000000000000066660000000000000660000000000000000000000000000080000007777700000067000000000000000000
00000000007770000000000000000000000000000066666000dddd000066660000000000000000000000000000777700007670000006d0000000000000000000
0000777000666000000000000000000000000000001f1f060015150000f1f100000000000000000000000000007d670000757000006d00000000000000000000
00dddddddddddd0000000000000000000000000000ffff000055550000ffff000000000000000000000000000076d70000767000005d50000000000000000000
000d00dddd00d000000000000000000000000000099999900cccccc008888880000000000000000000000000007d670000757000000050000000000000000000
000d00000000d0000000000000000000000000000f9999f005dddd500feeeef00000000000000000000000000077770000070000005555000000000000000000
000d00000000d0000000000000000000000000000020020000200200002002000000000000000000000000000000000000070600000000000000000000000000
__gff__
0000000000000000000000000001010100000000000000000003030303010303000000000000000000030303030103030703030303030000050501010100000003030303030303030303030300000000030300000000000000000000000000000303000000000000000000000000000003030000000707070000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4649444446494444464944444b44444701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45010b01450e0101450101014500014001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145010101450101014500014001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
450101011d0101011e0101011d013a4001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
464944444b4444444649442d4b44444701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145010101450e01014501014001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145010101450d01014500004001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45013a0145010101190101011e013a3c01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
46494444464944444649442e4b44444701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
450e010145010b01450e010145010a4001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501010145000101450101014500014001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
450001011e0101011d0801011b01004001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4b44442a4b44442a4b44442e31482c4701000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4501090145010901450101013235014001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45010101450000014501013b3335304001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
424343434243434342434343344a434101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010c02020075000750000500005000750007500005000050005500055000050000500055000550000500005000550000500055000050005500005000550000500055000550005500055000050000500005000050
010c0000180501805018050180501a0501a0501a0501a0501f0501f0501f0501f0501a0501a0501a0501a050180501805018050180501a0501a0501a0501a0501f0501f0501f0501f0501a0501a0501a0501a050
010c0000150201502015020150200e5200e5200e5200e5201102011020115201152010020100201052010520155201552015120151200e5200e5200e1200e1201112011120117201172010120101201072010720
__music__
03 00024344

