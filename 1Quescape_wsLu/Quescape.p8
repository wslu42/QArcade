pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- microqiskit
--------------------------------------
-- math.p8
math = {}
math.pi = 3.14159
math.max = max
math.sqrt = sqrt
math.floor = flr
function math.random()
  return rnd(1)
end
function math.cos(theta)
  return cos(theta/(2*math.pi))
end
function math.sin(theta)
  return -sin(theta/(2*math.pi))
end
function math.randomseed(time)
end
os = {}
function os.time()
end
--------------------------------------

-- microqiskit.lua
-- this code is part of qiskit.
-- copyright ibm 2020

math.randomseed(os.time())

function quantumcircuit ()

  local qc = {}

  local function set_registers (n,m)
    qc.num_qubits = n
    qc.num_clbits = m or 0
  end
  qc.set_registers = set_registers

  qc.data = {}

  function qc.initialize (ket)
    ket_copy = {}
    for j, amp in pairs(ket) do
      if type(amp)=="number" then
        ket_copy[j] = {amp, 0}
      else
        ket_copy[j] = {amp[0], amp[1]}
      end
    end
    qc.data = {{'init',ket_copy}}
  end

  function qc.add_circuit (qc2)
    qc.num_qubits = math.max(qc.num_qubits,qc2.num_qubits)
    qc.num_clbits = math.max(qc.num_clbits,qc2.num_clbits)
    for g, gate in pairs(qc2.data) do
      qc.data[#qc.data+1] = ( gate )
    end
  end

  function qc.x (q)
    qc.data[#qc.data+1] = ( {'x',q} )
  end

  function qc.rx (theta,q)
    qc.data[#qc.data+1] = ( {'rx',theta,q} )
  end

  function qc.h (q)
    qc.data[#qc.data+1] = ( {'h',q} )
  end

  function qc.cx (s,t)
    qc.data[#qc.data+1] = ( {'cx',s,t} )
  end

  function qc.measure (q,b)
    qc.data[#qc.data+1] = ( {'m',q,b} )
  end

  function qc.rz (theta,q)
    qc.h(q)
    qc.rx(theta,q)
    qc.h(q)
  end

  function qc.ry (theta,q)
    qc.rx(math.pi/2,q)
    qc.rz(theta,q)
    qc.rx(-math.pi/2,q)
  end

  function qc.z (q)
    qc.rz(math.pi,q)
  end

  function qc.y (q)
    qc.z(q)
    qc.x(q)
  end

  return qc

end

function simulate (qc, get, shots)

  if not shots then
    shots = 1024
  end

  function as_bits (num,bits)
    -- returns num converted to a bitstring of length bits
    -- adapted from https://stackoverflow.com/a/9080080/1225661
    local bitstring = {}
    for index = bits, 1, -1 do
        b = num - math.floor(num/2)*2
        num = math.floor((num - b) / 2)
        bitstring[index] = b
    end
    return bitstring
  end

  function get_out (j)
    raw_out = as_bits(j-1,qc.num_qubits)
    out = ""
    for b=0,qc.num_clbits-1 do
      if outputnum_clbitsap[b] then
        out = raw_out[qc.num_qubits-outputnum_clbitsap[b]]..out
      end
    end
    return out
  end


  ket = {}
  for j=1,2^qc.num_qubits do
    ket[j] = {0,0}
  end
  ket[1] = {1,0}

  outputnum_clbitsap = {}

  for g, gate in pairs(qc.data) do

    if gate[1]=='init' then

      for j, amp in pairs(gate[2]) do
          ket[j] = {amp[1], amp[2]}
      end

    elseif gate[1]=='m' then

      outputnum_clbitsap[gate[3]] = gate[2]

    elseif gate[1]=="x" or gate[1]=="rx" or gate[1]=="h" then

      j = gate[#gate]

      for i0=0,2^j-1 do
        for i1=0,2^(qc.num_qubits-j-1)-1 do
          b1=i0+2^(j+1)*i1 + 1
          b2=b1+2^j

          e = {{ket[b1][1],ket[b1][2]},{ket[b2][1],ket[b2][2]}}

          if gate[1]=="x" then
            ket[b1] = e[2]
            ket[b2] = e[1]
          elseif gate[1]=="rx" then
            theta = gate[2]
            ket[b1][1] = e[1][1]*math.cos(theta/2)+e[2][2]*math.sin(theta/2)
            ket[b1][2] = e[1][2]*math.cos(theta/2)-e[2][1]*math.sin(theta/2)
            ket[b2][1] = e[2][1]*math.cos(theta/2)+e[1][2]*math.sin(theta/2)
            ket[b2][2] = e[2][2]*math.cos(theta/2)-e[1][1]*math.sin(theta/2)
          elseif gate[1]=="h" then
            for k=1,2 do
              ket[b1][k] = (e[1][k] + e[2][k])/math.sqrt(2)
              ket[b2][k] = (e[1][k] - e[2][k])/math.sqrt(2)
            end
          end

        end
      end

    elseif gate[1]=="cx" then

      s = gate[2]
      t = gate[3]

      if s>t then
        h = s
        l = t
      else
        h = t
        l = s
      end

      for i0=0,2^l-1 do
        for i1=0,2^(h-l-1)-1 do
          for i2=0,2^(qc.num_qubits-h-1)-1 do
            b1 = i0 + 2^(l+1)*i1 + 2^(h+1)*i2 + 2^s + 1
            b2 = b1 + 2^t
            e = {{ket[b1][1],ket[b1][2]},{ket[b2][1],ket[b2][2]}}
            ket[b1] = e[2]
            ket[b2] = e[1]
          end
        end
      end

    end

  end

  if get=="statevector" then
    return ket
  else

    probs = {}
    for j,amp in pairs(ket) do
      probs[j] = amp[1]^2 + amp[2]^2
    end

    if get=="expected_counts" then

      c = {}
      for j,p in pairs(probs) do
        out = get_out(j)
        if c[out] then
          c[out] = c[out] + probs[j]*shots
        else
          if out then -- in case of pico8 weirdness
            c[out] = probs[j]*shots
          end
        end
      end
      return c

    else

      m = {}
      for s=1,shots do
        cumu = 0
        un = true
        r = math.random()
        for j,p in pairs(probs) do
          cumu = cumu + p
          if r<cumu and un then
            m[s] = get_out(j)
            un = false
          end
        end
      end

      if get=="memory" then
        return m

      elseif get=="counts" then
        c = {}
        for s=1,shots do
          if c[m[s]] then
            c[m[s]] = c[m[s]] + 1
          else
            if m[s] then -- in case of pico8 weirdness
              c[m[s]] = 1
            else
              if c["error"] then
                c["error"] = c["error"]+1
              else
                c["error"] = 1
              end
            end
          end
        end
        return c

      end

    end

  end

end
--------------------------------------
-->8
-- func_useful
-------------------------------
function wait(t) 
 for i = 1,t do flip() end end
-------------------------------
function fltn(tb,rank)
-- return flattened table from
--rank 2 to rank 4
 local tb_fl = {}

 if rank==2 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    add(tb_fl,u) end end    

 elseif rank==3 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    for k,t in pairs(u) do
    add(tb_fl,t) end end end    
 
 elseif rank==4 then
  for i,v in pairs(tb) do
   for j,u in pairs(v) do
    for k,t in pairs(u) do
     for k,s in pairs(t) do
     add(tb_fl,s) end end end end    

 end
 return(tb_fl)
end
-------------------------------
function tb2str (src, s2t)
-- convert tb_of_str to str
-- reverse action by s2t="s2t"
 local tar = -1
 if s2t=="s2t" then
  tar = {}
  for i = 1,#src do
   tar[i] = sub(src,i,i) end

 else
  tar = ""
  for i,v in pairs(src) do
   tar = tar..v end

 end
 return tar
end
-------------------------------
function as_bits (num,bits,idn)
-- convert decimal to bintable
-- set idn="s" to binstring
 local bitstring = {}
 for index = bits, 1, -1 do
     b = num - flr(num/2)*2
     num = flr((num - b) / 2)
     bitstring[index] = b
 end

 if idn=="s" then
  bitstring = tb2str(bitstring)
 end
 return bitstring
end
-------------------------------
function bin2dec(src)
-- convert bin table or binstr
--to a decimal number
 local n,str = 0, ""

 if type(src)=="table" then
  str = tb2str(src)
 else str = src end

 for i = 1,#str do 
  n +=tonum(sub(str,i,i))*2^(#str-i)
 end 

 return(n)
end
-------------------------------
function bint2dect(b,sort)
 local d = {}

 for i,v in pairs(b) do
  local n = {}
  for j,u in pairs(v) do
   n[j] = bin2dec(u)
  end

  if #n==1 then
   d[i] = tostr(n[1])
  elseif #n==2 and sort then
   d[i] = min(n[1],n[2])..max(n[1],n[2])
  else
   d[i] = n[1]..n[2]
  end
 
 end
 return(d)
end
-------------------------------
function dect2bint(d)
 local b = {}
 for i,v in pairs(d) do
  local a1 = {}
  for j=1,#v do
   a0 = as_bits(sub(v,j,j),3,"_")
   a1[j] = a0
  end
  b[i] = a1
 end
 return b
end
-------------------------------
function _prtct(m)
-- handle string from qc.meas
--translate to {state,counts}
//n = prtct(m)
//for i=1,#n[1] do
// print(n[1][i]) print(n[2][i]) end
 st={} ct={} j = 1
 for i,v in pairs(m) do
  st[j]=i ct[j]=v
  j=j+1   end
 return {st,ct}
end
-- cut only significant state
--with counts > llm
function _qcmeas(qc,llm)
 for i = 0,2,1 do
  qc.measure(i,i) end
 local n = prtct(simulate(qc,"counts",1))
 local nst,nct = n[1],n[2]
 local possiblestt = {}
 for i,v in pairs(nct) do
  if tonum(v)>llm then
   possiblestt[i]=nst[i] end
 end
 return(possiblestt)
end
-------------------------------

-->8
-- func_cust
function qcmeas(nbit,qc,shots)
 for i = 0,nbit-1,1 do
  qc.measure(i,i)
 end
 return(simulate(qc,'counts',shots))
end

function movp(x,lim,pix)
 if x<lim then
  x = x+pix
 else
  x = x
 end
 return(x)
end

function movn(x,lim,pix)
 if lim<x then
  x = x-pix
 else
  x = x
 end
 return(x)
end
-->8
-- main_init
function _init()
 cls()
 
 nbit = 3
 shots=16
 n = 1
 l = 20
 bd = 3
 
 rmx = 0
 rmy = 1
 xmin =  rmx   *32 +bd
 ymin =  rmy   *32 +bd
 xmax = (rmx+1)*32 -6-bd
 ymax = (rmy+1)*32 -6-bd
 x = xmin
 y = ymin
 
 dic={{0,0},{1,0},{2,0},{2,1},
      {0,1},{0,2},{1,2},{2,2}}
 
end
--------------------------------------
-->8
-- main_update
function _update()

 qc = quantumcircuit()
 qc.set_registers(nbit,nbit)

 if (btn(0,0)) then
  x = movn(x,xmin,1) end 
 if (btn(1,0)) then
  x = movp(x,xmax,1) end
 if (btn(2,0)) then
  y = movn(y,ymin,1) end
 if (btn(3,0)) then
  y = movp(y,ymax,1) end

 if (btnp(4,0)) then
  qc.h(0)
  qc.cx(0,1)
  m = qcmeas(nbit,qc,shots) end

 if (btnp(0,1)) then
  qc.h(0)
  qc.h(1)
  qc.h(2)
  m = qcmeas(nbit,qc,1)
  
  local nst = ""
  for i,v in pairs(m) do
   nst = i end 
   
  rmx = dic[bin2dec(nst)+1][1]
  rmy = dic[bin2dec(nst)+1][2]
  local xs = x - xmin
  local ys = y - ymin

  xmin =  rmx   *32 +bd
  ymin =  rmy   *32 +bd
  xmax = (rmx+1)*32 -6-bd
  ymax = (rmy+1)*32 -6-bd
  
  x = xmin +xs
  y = ymin +ys
  
 end

end
--------------------------------------
-->8
-- main_draw
function _draw()
 cls()
 spr(n,x,y)
 map(0,0)

 local sdic = {"000","001",
         "010","011","100",
         "101","110","111",}
 for i,v in pairs(sdic) do
  print(v,
    dic[bin2dec(v)+1][1]*32+19+bd,
    dic[bin2dec(v)+1][2]*32+25+bd,
        35) end

end

__gfx__
00000000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700600000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000606006060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000606006060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700600000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000060000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000770000000000000000077777777777700000077777777770000000000007777777777000770007700000000077000000000777777777700000000
00000000000770000000000000000077777777777700000077777777770000000000007777777777000770007777777700077000000000777777777700000000
00000000000770000000000000000077000000007700000077000000770000000000007700000077000770007777777700077000000000770770000000000000
77777777000770000000000000000077000000007700000077000000770000000000007700000077777777777700000000077000777777770770000000000000
77777777000770000000000000000077000000007700000077000000770000000000007700000077777777777700000000077000777777770770000000000000
00000000000770000000000000000077000000007700000077000000770000000000007700000077000770007700000000077000000000770770000000000000
00000000000770007777777700000077000000007700000077000000777777777777777700000077000770007700000077777777000000770770000000000000
00000000000770007777777700000077000000007700000077000000777777777777777700000077000770007700000077777777000000770770000000000000
__map__
4644444446444444464444444644444900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4564645145515151450000004500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4564645145515151450000004500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4564647745676777456767774500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4644444446444444464444444567674300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4551515145645564457500004500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4551516445515164450000004500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4551645545676755456767554500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4644444446444444464444444567674300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4564640045007555450000004500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4500640045007555450000004500004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4500005645000056450000674564004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4644444444444444444444446767674300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
456a6a6a6a0000006a0000006a00004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
456a6a6a6a0000006a0000006a00004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4742424242424242424242424242424800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000202011f0501d0501c0501a070180501f0501c0501c0501d0501a0501a050180501a0501c0501d0501f0701f0701f0201f0501c0501c0501d0601a0501a050180601c0501f0301f0501c0501c0501c05021050
__music__
04 41424344

